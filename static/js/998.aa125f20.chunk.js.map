{"version":3,"file":"static/js/998.aa125f20.chunk.js","mappings":"mOAuGA,UA9FsB,WAClB,OAAsCA,EAAAA,EAAAA,UAAS,IAAG,eAA3CC,EAAW,KAAEC,EAAc,KAClC,GAAoCF,EAAAA,EAAAA,UAAS,IAAG,eAAzCG,EAAU,KAAEC,EAAa,KAChC,GAAoCJ,EAAAA,EAAAA,UAAS,IAAG,eAAzCK,EAAU,KAAEC,EAAa,KAC1BC,GAAWC,EAAAA,EAAAA,MAEK,aAOrB,OAPqB,0BAAtB,yFAC+B,OAAvBC,EAAqB,GAAG,EAAD,QACCC,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,YAAY,KAAD,EAA3C,OACLC,SAAQ,SAACC,GACnBL,EAAmBM,KAAK,IAAIC,OAAOF,EAAIG,OAAOC,UAClD,IACAhB,EAAeO,GAAoB,4CACtC,sBAEwB,aAOxB,OAPwB,0BAAzB,yFACoB,OAAZU,EAAU,GAAG,EAAD,QACYT,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,eAAe,KAAD,EAA9C,OACLC,SAAQ,SAACC,GACnBK,EAAQJ,KAAK,IAAIC,OAAOF,EAAIG,OAAOC,UACvC,IACAd,EAAce,GAAS,4CAC1B,sBAE2B,aAO3B,OAP2B,0BAA5B,yFACmB,OAAXC,EAAS,GAAG,EAAD,QACaV,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,WAAW,KAAD,EAA1C,OACLC,SAAQ,SAACC,GACnBM,EAAOL,KAAK,IAAIC,OAAOF,EAAIG,OAAOC,UACtC,IACAZ,EAAcc,GAAQ,4CACzB,sBAoCD,OAVAC,EAAAA,EAAAA,YAAU,WACNC,EAAAA,EAAAA,oBAAwB,SAACC,GACR,OAATA,GACAhB,EAAS,gBAxDU,WAET,wBAwDdiB,GAjDP,WAEwB,wBAgDjBC,GAzCP,WAE2B,wBAwCpBC,EACJ,GACJ,GAAG,KAEC,+BACI,gBAAKC,UAAU,qBAAoB,UAC/B,iBAAKA,UAAU,0CAAyC,WACpD,mBAAQA,UAAU,gDACdC,QAvCE,WAClB,IAAMC,EAAYC,EAAAA,GAAAA,cAAyB7B,GACrC8B,EAAWD,EAAAA,GAAAA,WACjBA,EAAAA,GAAAA,kBAA6BC,EAAUF,EAAW,UAClD,IAAMG,EAAYF,EAAAA,GAAWC,EAAU,CAAEE,SAAU,OAAQC,KAAM,WACjEC,IAAO,IAAIC,KAAK,CAACJ,GAAY,CAAEE,KAAM,6BAA+B,YACxE,EAiC2C,wBAI3B,mBACIP,UAAU,gDACVC,QArCG,WACnB,IAAMC,EAAYC,EAAAA,GAAAA,cAAyB3B,GACrC4B,EAAWD,EAAAA,GAAAA,WACjBA,EAAAA,GAAAA,kBAA6BC,EAAUF,EAAW,UAClD,IAAMG,EAAYF,EAAAA,GAAWC,EAAU,CAAEE,SAAU,OAAQC,KAAM,WACjEC,IAAO,IAAIC,KAAK,CAACJ,GAAY,CAAEE,KAAM,6BAA+B,YACxE,EA+B4C,uBAI5B,mBACIP,UAAU,gDACVC,QAnCM,WACtB,IAAMC,EAAYC,EAAAA,GAAAA,cAAyBzB,GACrC0B,EAAWD,EAAAA,GAAAA,WACjBA,EAAAA,GAAAA,kBAA6BC,EAAUF,EAAW,UAClD,IAAMG,EAAYF,EAAAA,GAAWC,EAAU,CAAEE,SAAU,OAAQC,KAAM,WACjEC,IAAO,IAAIC,KAAK,CAACJ,GAAY,CAAEE,KAAM,6BAA+B,YACxE,EA6B+C,+BAQnD,C","sources":["Components/EnqiryReport/EnquiryReport.jsx"],"sourcesContent":["import { async } from \"@firebase/util\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Auth } from \"../../firebase\";\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport * as XLSX from 'xlsx';\nimport saveAs from 'file-saver';\n\nconst EnquiryReport = () => {\n    const [flatDetails, setFlatDetails] = useState([]);\n    const [jobDetails, setJobDetails] = useState([]);\n    const [vendorData, setVendorData] = useState([]);\n    const navigate = useNavigate();\n\n    async function getData() {\n        let flatEnquiryDetails = [];\n        const querySnapshot = await getDocs(collection(db, \"enquiry\"));\n        querySnapshot.forEach((doc) => {\n            flatEnquiryDetails.push(new Object(doc.data().formData));\n        });\n        setFlatDetails(flatEnquiryDetails);\n    }\n\n    async function getJobData() {\n        let jobData = [];\n        const querySnapshot = await getDocs(collection(db, \"jobOpening\"));\n        querySnapshot.forEach((doc) => {\n            jobData.push(new Object(doc.data().formData));\n        });\n        setJobDetails(jobData);\n    }\n\n    async function getVendorData() {\n        let vendor = [];\n        const querySnapshot = await getDocs(collection(db, \"vendor\"));\n        querySnapshot.forEach((doc) => {\n            vendor.push(new Object(doc.data().formData));\n        });\n        setVendorData(vendor);\n    }\n\n    const FlatDataToCSV = () => {\n        const worksheet = XLSX.utils.json_to_sheet(flatDetails);\n        const workbook = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\n        const excelFile = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });\n        saveAs(new Blob([excelFile], { type: 'application/octet-stream' }), 'data.xlsx');\n    }\n\n    const jobDataToExcel = () => {\n        const worksheet = XLSX.utils.json_to_sheet(jobDetails);\n        const workbook = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\n        const excelFile = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });\n        saveAs(new Blob([excelFile], { type: 'application/octet-stream' }), 'data.xlsx');\n    }\n\n    const vendorDataToExcel = () => {\n        const worksheet = XLSX.utils.json_to_sheet(vendorData);\n        const workbook = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\n        const excelFile = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });\n        saveAs(new Blob([excelFile], { type: 'application/octet-stream' }), 'data.xlsx');\n    }\n\n    useEffect(() => {\n        Auth.onAuthStateChanged((user) => {\n            if (user === null) {\n                navigate(\"/admin-panel\");\n            }\n            getData();\n            getJobData();\n            getVendorData();\n        });\n    }, []);\n    return (\n        <>\n            <div className=\"py-32 px-16 w-full\">\n                <div className=\"w-full flex items-center justify-evenly\">\n                    <button className=\"py-2 px-4 bg-indigo-500 text-white rounded-lg\"\n                        onClick={FlatDataToCSV}\n                    >\n                        Flat Data\n                    </button>\n                    <button\n                        className=\"py-2 px-4 bg-indigo-500 text-white rounded-lg\"\n                        onClick={jobDataToExcel}\n                    >\n                        Job Data\n                    </button>\n                    <button\n                        className=\"py-2 px-4 bg-indigo-500 text-white rounded-lg\"\n                        onClick={vendorDataToExcel}\n                    >\n                        Vendor Data\n                    </button>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default EnquiryReport;\n"],"names":["useState","flatDetails","setFlatDetails","jobDetails","setJobDetails","vendorData","setVendorData","navigate","useNavigate","flatEnquiryDetails","getDocs","collection","db","forEach","doc","push","Object","data","formData","jobData","vendor","useEffect","Auth","user","getData","getJobData","getVendorData","className","onClick","worksheet","XLSX","workbook","excelFile","bookType","type","saveAs","Blob"],"sourceRoot":""}